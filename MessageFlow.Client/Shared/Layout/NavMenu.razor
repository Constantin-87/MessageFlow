@implements IDisposable
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveWebAssembly
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor *@
@* @using System.Security.Claims *@

<div class="top-row ps-3 navbar navbar-dark bg-dark">
    <div class="container-fluid">
        @if (!string.IsNullOrEmpty(companyName) && !string.IsNullOrEmpty(userName))
        {
            <div class="navbar-brand">
                <div>@companyName</div>
                <small>@userName - <span class="text-success">Available</span></small>
            </div>
        }
        else
        {
            <a class="navbar-brand" href="/">Message Flow</a>
        }
    </div>
</div>

<div class="nav-scrollable">
    <nav class="flex-column">

        <AuthorizeView>
            <!-- Agent Workspace -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/AgentWorkspace">
                    <span class="bi bi-chat-left-text" aria-hidden="true"></span> Agent Workspace
                </NavLink>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Manager, Admin, SuperAdmin">
            <!-- Manager Workspace -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/AgentManagerWorkspace">
                    <span class="bi bi-clipboard-data" aria-hidden="true"></span> Manager Workspace
                </NavLink>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Admin, SuperAdmin">
            <!-- Manage Dropdown -->
            <div class="nav-item px-3 dropdown">
                <button class="nav-link dropdown-toggle" href="#" @onclick="()=>expandSubMenu = !expandSubMenu">
                    <span class="bi bi-kanban" aria-hidden="true"></span> Manage
                </button>

                @if (expandSubMenu)
                {
                    <ul class="nav flex-column">
                        <li class="nav-item px-3 dropdown">
                            <!-- User Accounts -->
                            <NavLink class="dropdown-item" href="/Accounts/UserAccounts">
                                <i class="bi bi-person-fill" aria-hidden="true"></i> User Accounts
                            </NavLink>
                        </li>

                        <AuthorizeView Roles="SuperAdmin, Admin" Context="CompanyAccountsContext">
                            <li class="nav-item px-3 dropdown">
                                <NavLink class="dropdown-item" href="@GetCompanyLink()">
                                    <i class="bi bi-building"></i> @GetCompanyLabel()
                                </NavLink>
                            </li>
                        </AuthorizeView>

                        <li class="nav-item px-3 dropdown">
                            <!-- Manage Teams -->
                            <NavLink class="dropdown-item" href="/Accounts/ManageTeams">
                                <i class="bi bi-people" aria-hidden="true"></i> Manage Teams
                            </NavLink>
                        </li>

                        <li class="nav-item px-3">
                            <NavLink class="dropdown-item" href="/ChannelSetup">
                                <i class="bi bi-gear"></i> Channel Setup
                            </NavLink>
                        </li>
                    </ul>
                }
            </div>
        </AuthorizeView>

        <AuthorizeView>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Accounts/Logout">
                    <span class="bi bi-arrow-bar-left" aria-hidden="true"></span> Logout
                </NavLink>
            </div>
        </AuthorizeView>

    </nav>
</div>

@code {
    private string? currentUrl;
    private bool expandSubMenu;
    private string companyDetailsUrl = string.Empty;
    private string companyName = string.Empty;
    private string userName = string.Empty;
    private bool IsSuperAdmin;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadUserState();    
        StateHasChanged();
    }

    private async Task LoadUserState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? string.Empty;
            companyName = user.Claims.FirstOrDefault(c => c.Type == "CompanyName")?.Value ?? string.Empty;
            var companyId = user.Claims.FirstOrDefault(c => c.Type == "CompanyId")?.Value ?? string.Empty;

            var userRoles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();

            IsSuperAdmin = userRoles.Contains("SuperAdmin");

            companyDetailsUrl = IsSuperAdmin ? "/Accounts/CompanyAccounts" : $"/edit-company/{companyId}";
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        if (currentUrl != "AgentWorkspace")
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private string GetCompanyLabel()
    {
        string label = IsSuperAdmin ? "Company Accounts" : "Company Details";
        Console.WriteLine($"🔖 GetCompanyLabel() -> {label}");
        return label;
    }

    private string GetCompanyLink()
    {
        string link = IsSuperAdmin ? "/Accounts/CompanyAccounts" : companyDetailsUrl;
        Console.WriteLine($"🔗 GetCompanyLink() -> {link}");
        return link;
    }

}
