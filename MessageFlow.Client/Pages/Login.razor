@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";

    private async Task LoginUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://identity.myapp.com/api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<JwtResponse>();

                // Store the token in localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                // Redirect user to home page
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed. Please try again.";
        }
    }

    private class JwtResponse
    {
        public string Token { get; set; }
    }

    private class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
