@using System.ComponentModel.DataAnnotations
@rendermode RenderMode.InteractiveWebAssembly
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="new-conversations-list">
    <h4>New Conversations</h4>
    @if (isLoading)
    {
        <LoadingIndicator Message="Loading conversations..." IsDark="false" />
    }
    else
    {
        <ul>
            @foreach (var conversation in Conversations)
            {
                <li>
                    <span>Chat with @conversation.SenderUsername from: @conversation.SourceLabel</span>
                    <button @onclick="async () => await AssignToSelf(conversation)">Assign to Myself</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter, Required] public string? UserId { get; set; }
    [Parameter, Required] public string? TeamId { get; set; }
    [Parameter, Required] public HubConnection HubConnection { get; set; }
    [Parameter, Required] public ChatWindow ChatWindowRef { get; set; }

    private List<Conversation> Conversations = new();
    private bool isLoading = true;
    private IEnumerable<Conversation> FilteredConversations =>
        string.IsNullOrEmpty(TeamId)
            ? Conversations
            : Conversations.Where(c => c.AssignedTeamId == TeamId);


    protected override void OnParametersSet()
    {
        if (HubConnection != null)
        {
            RegisterHandlers();
        }
    }

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            HubConnection.On<Conversation>("NewConversationAdded", (conversation) =>
            {
                AddConversation(conversation);
            });

            HubConnection.On<Conversation>("RemoveNewConversation", (conversation) =>
            {
                RemoveConversation(conversation);
            });

            HubConnection.On<List<Conversation>>("LoadNewConversations", (newConversations) =>
           {
               LoadNewConversations(newConversations);
           });
        }
    }

    public void LoadNewConversations(List<Conversation> newConversations)
    {
        isLoading = true;
        Conversations.Clear();

        foreach (var conversation in newConversations)
        {
            AddConversation(conversation);
        }
        isLoading = false;
        StateHasChanged();
    }

    public void AddConversation(Conversation conversation)
    {
        if (!Conversations.Any(c => c.Id == conversation.Id))
        {
            Conversations.Add(conversation);
        }
        StateHasChanged();
    }

    public void RemoveConversation(Conversation conversation)
    {
        if (conversation != null)
        {
            Conversations.RemoveAll(c => c.Id == conversation.Id);
            StateHasChanged();
        }
    }

    private async Task AssignToSelf(Conversation conversation)
    {
        if (HubConnection is not null)
        {
            conversation.IsAssigned = true;
            conversation.AssignedUserId = UserId;

            await HubConnection.SendAsync("AssignConversationToUser", conversation.Id);
            Conversations.Remove(conversation);
        }
        else
        {
            Console.WriteLine("hubConnection or UserId is null. Cannot assign conversation.");
        }
    }
}