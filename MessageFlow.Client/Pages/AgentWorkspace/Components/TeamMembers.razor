@rendermode RenderMode.InteractiveWebAssembly

<div class="team-members">
    <h4>Teams:</h4>
    @if (GroupedTeamMembers != null && GroupedTeamMembers.Any())
    {
        @foreach (var team in GroupedTeamMembers.Keys)
        {
            <div class="team-group">
                <button class="btn btn-primary mb-2" @onclick="() => ToggleTeam(team)">
                    @team (@GroupedTeamMembers[team].Count)
                </button>
                @if (ExpandedTeams.Contains(team))
                {
                    <ul>
                        @foreach (var member in GroupedTeamMembers[team])
                        {
                            <li>@member.UserName (@GetActivityStatus(member.LastActivity))</li>
                        }
                    </ul>
                }
            </div>
        }
    }
    else
    {
        <p>No other agents online.</p>
    }
</div>

@code {
    private Dictionary<string, List<ApplicationUserDTO>> GroupedTeamMembers = new();
    private HashSet<string> ExpandedTeams = new();

    [Parameter] 
    public HubConnection HubConnection { get; set; }
    [Parameter]
    public string? CurrentUserName { get; set; }

    protected override void OnParametersSet()
    {
        if (HubConnection != null)
        {
            RegisterHandlers();
        }
    }

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            HubConnection.On<ApplicationUserDTO>("AddTeamMember", AddTeamMember);
            HubConnection.On<ApplicationUserDTO>("RemoveTeamMember", RemoveTeamMember);
        }
    }

    public void AddTeamMember(ApplicationUserDTO member)
    {
        if (member.UserName == CurrentUserName) return; // Exclude the current user

        var teamNames = member.TeamIds.Any()
            ? member.TeamIds
            : new List<string> { "Unassigned" };

        foreach (var teamName in teamNames)
        {
            var displayTeam = string.IsNullOrEmpty(teamName) ? "Unassigned" : teamName;

            if (!GroupedTeamMembers.ContainsKey(displayTeam))
            {
                GroupedTeamMembers[displayTeam] = new List<ApplicationUserDTO>();
            }

            if (!GroupedTeamMembers[displayTeam].Any(m => m.Id == member.Id))
            {
                GroupedTeamMembers[displayTeam].Add(member);
            }
        }

        StateHasChanged();
    }

    // Remove a team member
    public void RemoveTeamMember(ApplicationUserDTO member)
    {
        var teamNames = member.TeamIds.Any()
            ? member.TeamIds
            : new List<string> { "Unassigned" };

        foreach (var teamName in teamNames)
        {
            var displayTeam = string.IsNullOrEmpty(teamName) ? "Unassigned" : teamName;

            if (GroupedTeamMembers.ContainsKey(displayTeam))
            {
                GroupedTeamMembers[displayTeam].RemoveAll(m => m.Id == member.Id);
                if (GroupedTeamMembers[displayTeam].Count == 0)
                {
                    GroupedTeamMembers.Remove(displayTeam);
                }
            }
        }

        StateHasChanged();
    }

    private void ToggleTeam(string team)
    {
        if (ExpandedTeams.Contains(team))
        {
            ExpandedTeams.Remove(team);
        }
        else
        {
            ExpandedTeams.Add(team);
        }
    }

    private string GetActivityStatus(DateTime lastActivity)
    {
        var now = DateTime.UtcNow;
        var timeDifference = now - lastActivity;

        if (timeDifference.TotalMinutes < 1)
        {
            return "Active";
        }
        else
        {
            var minutesAgo = (int)Math.Floor(timeDifference.TotalMinutes);
            return $"Last seen {minutesAgo} minute{(minutesAgo != 1 ? "s" : "")} ago";
        }
    }


    // public class TeamMember
    // {
    //     public string Name { get; set; } = string.Empty;
    //     public string Status { get; set; } = "Offline";
    //     public string Team { get; set; } = string.Empty;
    // }

}
