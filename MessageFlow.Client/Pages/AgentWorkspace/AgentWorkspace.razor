@page "/AgentWorkspace"
@attribute [Authorize(Roles = "Agent, Manager, Admin, SuperAdmin")]
@layout Pages.Shared.Layout.PrivateSubLayout
@rendermode RenderMode.InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable
@inject AppConfig AppConfig
@inject IJSRuntime JSRuntime

<h3>Agent Workspace</h3>

<div class="workspace-container">
    <!-- Team Members List -->
    <div class="team-members">
        <TeamMembers CurrentUserName="@UserName" HubConnection="@hubConnection" />
    </div>

    <!-- Chat Section -->
    <div class="chat-section">
        <ChatWindow UserId="@UserId" CurrentUserName="@UserName" HubConnection="@hubConnection" />
    </div>

    <!-- New Conversations List -->
    <NewConversationsList UserId="@UserId" HubConnection="@hubConnection" ChatWindowRef="@ChatWindowRef" />

</div>

@code {
    private HubConnection? hubConnection;
    private ChatWindow? ChatWindowRef;

    private string? UserId;
    private string? CompanyId;
    private string? UserName;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity == null || !user.Identity.IsAuthenticated)
            {
                Console.WriteLine("User is not authenticated.");
                return;
            }
            
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            CompanyId = user?.FindFirst(c => c.Type == "CompanyId")?.Value ?? "";
            UserName = user?.Identity?.Name;
          
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{AppConfig.ServerApiUrl}/chatHub?companyId={CompanyId}", options =>
                {
                    options.AccessTokenProvider = async () =>
                    {
                        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
                        return token;
                    };
                })
                .WithAutomaticReconnect()
                .AddNewtonsoftJsonProtocol()
                .Build();
            await hubConnection.StartAsync();
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }

}
