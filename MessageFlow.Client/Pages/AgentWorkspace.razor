@page "/AgentWorkspace"
@attribute [Authorize]
@rendermode RenderMode.InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<link href="css/AgentWorkspace.css" rel="stylesheet" />

<h3>Agent Workspace</h3>

<div class="workspace-container">
    <!-- Team Members List -->
    <div class="team-members">
        <TeamMembers @ref="TeamMembersRef" CurrentUserName="@UserName" HubConnection="@hubConnection" />
    </div>

    <!-- Chat Section -->
    <div class="chat-section">
        <ChatWindow @ref="ChatWindowRef" UserId="@UserId" CurrentUserName="@UserName" HubConnection="@hubConnection" />
    </div>

    <!-- New Conversations List -->
    <NewConversationsList @ref="NewConversationsListRef" UserId="@UserId" HubConnection="@hubConnection" ChatWindowRef="@ChatWindowRef" />

</div>

@code {
    private HubConnection? hubConnection;
    private ChatWindow? ChatWindowRef;
    private NewConversationsList? NewConversationsListRef;
    private TeamMembers? TeamMembersRef;

    private string? UserId;
    private string? UserName;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            UserName = user?.Identity?.Name;

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}chatHub")
                .WithAutomaticReconnect()
                .AddNewtonsoftJsonProtocol()
                .Build();

            await hubConnection.StartAsync();

            // Connection is established before calling OnHubConnected
            if (hubConnection.State == HubConnectionState.Connected)
            {
                OnHubConnected();
            }
            StateHasChanged();
        }
    }

    private void OnHubConnected()
    {
        NewConversationsListRef?.RegisterHandlers();
        ChatWindowRef?.RegisterHandlers();
        TeamMembersRef?.RegisterHandlers();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }

}
