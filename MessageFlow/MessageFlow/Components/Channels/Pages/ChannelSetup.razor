@page "/ChannelSetup"
@attribute [Authorize(Roles = "Admin, SuperAdmin")]
@rendermode RenderMode.InteractiveServer

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CompanyManagementService CompanyService


<h3>Channel Setup</h3>

@if (IsSuperAdmin)
{
    <div class="mb-3">
        <label>Select Company</label>
        <select class="form-select" @onchange="HandleCompanyChange">
            @foreach (var company in companies)
            {
                <option value="@company.Id" selected="@((selectedCompany != null && selectedCompany.Id == company.Id) ? "selected" : null)">
                    @company.CompanyName
                </option>
            }
        </select>
    </div>
}
else if (selectedCompany != null)
{
    <p>Managing channels for: @selectedCompany?.CompanyName</p>
}

@if (selectedCompany != null)
{
    <div class="row">
        @foreach (var channel in channels)
        {
            <div class="col-md-3">
                <div class="card channel-card" @onclick="() => NavigateToChannel(channel)">
                    <div class="card-body">
                        <h5>@channel.Name</h5>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private bool IsSuperAdmin;
    private Company? selectedCompany;
    private List<Company> companies = new();
    private List<Channel> channels = new()
    {
        new Channel { Name = "Facebook", Icon = "facebook.png" },
        new Channel { Name = "WhatsApp", Icon = "whatsapp.png" }
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is a SuperAdmin or Admin
        IsSuperAdmin = user.IsInRole("SuperAdmin");

        if (IsSuperAdmin)
        {
            companies = await CompanyService.GetAllCompaniesAsync();
            // Preselect the first company for SuperAdmin
            if (companies.Any())
            {
                selectedCompany = companies.FirstOrDefault();
            }
        }
        else
        {
            selectedCompany = await CompanyService.GetCompanyForUserAsync(user);
        }
        StateHasChanged();
    }

    private async Task HandleCompanyChange(ChangeEventArgs e)
    {
        var companyIdStr = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(companyIdStr) && int.TryParse(companyIdStr, out var companyId))
        {
            await using var dbContext = CompanyService.CreateDbContext();
            selectedCompany = await CompanyService.GetCompanyByIdAsync(dbContext, companyId);
            StateHasChanged();
        }
    }

    private void NavigateToChannel(Channel channel)
    {
        if (selectedCompany != null && channel.Name == "Facebook")
        {
            NavigationManager.NavigateTo($"/ChannelSetup/{selectedCompany.Id}/Facebook");
        }
        // To add other channels here as needed
    }

    public class Channel
    {
        public string Name { get; set; }
        public string Icon { get; set; }
    }
}
