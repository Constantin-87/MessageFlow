@page "/AgentWorkspace"
@attribute [Authorize]
@rendermode RenderMode.InteractiveWebAssembly
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<link href="css/AgentWorkspace.css" rel="stylesheet" />

<h3>Agent Workspace</h3>

<div class="workspace-container">
    <!-- Team Members List -->
    <div class="team-members">
        <TeamMembers @ref="TeamMembersRef" CurrentUserName="@UserName" HubConnection="@hubConnection" />
    </div>

    <!-- Chat Section -->
    <div class="chat-section">
        <ChatWindow @ref="ChatWindowRef" UserId="@UserId" HubConnection="@hubConnection"/>
    </div>

    <!-- New Conversations List -->
    <NewConversationsList @ref="NewConversationsListRef" UserId="@UserId" HubConnection="@hubConnection" ChatWindowRef="@ChatWindowRef" />

</div>

@code {
    private HubConnection? hubConnection;
    private ChatWindow? ChatWindowRef;
    private NewConversationsList? NewConversationsListRef;
    private TeamMembers? TeamMembersRef;

    private string? UserId;
    private string? UserCompanyId;
    private string? UserTeams;
    private string? UserName;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            UserId = user?.FindFirst("UserId")?.Value;
            UserCompanyId = user?.FindFirst("CompanyId")?.Value;
            UserName = user?.Identity?.Name;

            Console.WriteLine($"UserId: {UserId}");
            Console.WriteLine($"UserCompanyId: {UserCompanyId}");
            Console.WriteLine($"UserName: {UserName}");

            // Extract all teams from UserTeams string
            var userTeamsString = user?.FindFirst("UserTeams")?.Value;
            var userTeams = ParseUserTeams(userTeamsString);

            // Create a string with all team IDs and names
            var userTeamsJson = System.Text.Json.JsonSerializer.Serialize(userTeams);

            Console.WriteLine($"Parsed UserTeams: {userTeamsJson}");

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"https://localhost:7164/chatHub?companyId={UserCompanyId}&teams={Uri.EscapeDataString(userTeamsJson)}")
                .WithAutomaticReconnect() // Enables automatic reconnection
                .AddNewtonsoftJsonProtocol()
                .Build();

            if (UserCompanyId != null)
            {
                await hubConnection.StartAsync();

                // Connection is established before calling OnHubConnected
                if (hubConnection.State == HubConnectionState.Connected)
                {                    
                    OnHubConnected();
                }
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Company ID is missing. Cannot start hub connection.");
            }
        }

        
    }

    private void OnHubConnected()
    {
        NewConversationsListRef?.RegisterHandlers();
        ChatWindowRef?.RegisterHandlers();
        TeamMembersRef?.RegisterHandlers();
    }

    public class Team
    {
        public int TeamId { get; set; }
        public string TeamName { get; set; } = string.Empty;
    }

    private List<Team> ParseUserTeams(string? userTeamsString)
    {
        var teams = new List<Team>();

        if (!string.IsNullOrEmpty(userTeamsString))
        {
            var teamEntries = userTeamsString.Split(';', StringSplitOptions.RemoveEmptyEntries);

            foreach (var entry in teamEntries)
            {
                var parts = entry.Split(':', 2);
                if (parts.Length == 2 && int.TryParse(parts[0], out var teamId))
                {
                    var teamName = parts[1].Trim();
                    teams.Add(new Team { TeamId = teamId, TeamName = teamName });
                }
            }
        }

        return teams;
    }

    // private async Task SendMessageToHub(string message)
    // {
    //     if (hubConnection is not null && UserId is not null && UserCompanyId is not null && UserTeams is not null)
    //     {
    //         var teamIds = ParseUserTeams(UserTeams).Select(t => t.TeamId).ToList();
    //         await hubConnection.SendAsync("SendMessageToAgent", UserId, message, UserCompanyId, teamIds);
    //     }
    // }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }

}
