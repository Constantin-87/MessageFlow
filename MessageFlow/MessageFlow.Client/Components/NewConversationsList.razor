@using System.ComponentModel.DataAnnotations
@rendermode RenderMode.InteractiveWebAssembly
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="new-conversations-list">
    <h4>New Conversations</h4>
    <ul>
        @foreach (var conversation in Conversations)
        {
            <li>
                @conversation.Title
                <button @onclick="async () => await AssignToSelf(conversation)">Assign to Myself</button>
                <button @onclick="() => AssignToOther(conversation)">Assign to Different User</button>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter, Required] public string? UserId { get; set; }
    [Parameter, Required] public HubConnection HubConnection { get; set; }
    [Parameter, Required] public ChatWindow ChatWindowRef { get; set; }

    private List<Conversation> Conversations = new();

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            HubConnection.On<Conversation>("NewConversationAdded", (conversation) =>
            {
                Console.WriteLine($"NewConversationAdded event received: {conversation?.Title}");
                AddConversation(conversation);
            });

            HubConnection.On<Conversation>("RemoveNewConversation", (conversation) =>
            {
                Console.WriteLine($"RemoveNewConversation event received: {conversation?.Title}");
                RemoveConversation(conversation);
            });
        }
    }

    public void AddConversation(Conversation conversation)
    {
        Console.WriteLine($"Adding conversation: {conversation?.Title}, ID: {conversation?.Id}");
        Conversations.Add(conversation);
        StateHasChanged();
    }


    public void RemoveConversation(Conversation conversation)
    {
        if (conversation != null)
        {
            Console.WriteLine($"Attempting to remove conversation: {conversation?.Title}, ID: {conversation?.Id}");
            Conversations.RemoveAll(c => c.Id == conversation.Id);
            StateHasChanged();
            Console.WriteLine($"Removed conversation: {conversation.Id}");
        }
    }

    private async Task AssignToSelf(Conversation conversation)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = user?.FindFirst("UserId")?.Value;

        Console.WriteLine($"HubConnection: {HubConnection}");

        if (HubConnection is not null)
        {
            conversation.IsAssigned = true;
            conversation.AssignedUserId = userId;

            await HubConnection.SendAsync("AssignConversationToUser", conversation.Id);
            Conversations.Remove(conversation);
            Console.WriteLine($"Assigned conversation {conversation.Id} to user {userId}");

        }
        else
        {
            Console.WriteLine("hubConnection or UserId is null. Cannot assign conversation.");
        }
    }


    private void AssignToOther(Conversation conversation)
    {
        // Placeholder for assigning to another user
        Console.WriteLine("To Do: AssignToOther to other member");
    }


}
