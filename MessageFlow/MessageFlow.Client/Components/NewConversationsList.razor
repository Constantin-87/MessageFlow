@rendermode RenderMode.InteractiveWebAssembly

<div class="new-conversations-list">
    <h4>New Conversations</h4>
    <ul>
        @foreach (var conversation in Conversations)
        {
            <li>
                @conversation.Title
                <button @onclick="() => AssignToSelf(conversation)">Assign to Myself</button>
                <button @onclick="() => AssignToOther(conversation)">Assign to Different User</button>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter] public EventCallback<string> OnConversationSelected { get; set; }
    [Parameter] public EventCallback<Conversation> OnConversationAssigned { get; set; }

    private List<Conversation> Conversations = new();

    public void AddConversation(Conversation conversation)
    {
        Conversations.Add(conversation);
        StateHasChanged();
        Console.WriteLine($"Adding conversation: {conversation.Title}");
    }

    private async Task AssignToSelf(Conversation conversation)
    {
        await OnConversationAssigned.InvokeAsync(conversation);
        Conversations.Remove(conversation);
        StateHasChanged();
    }

    private async Task AssignToOther(Conversation conversation)
    {
        // Placeholder for assigning to another user
        await OnConversationSelected.InvokeAsync(conversation.Id);
    }

    public class Conversation
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Title { get; set; } = string.Empty;
        public string SenderId { get; set; } = string.Empty;
        public int CompanyID { get; set; } = 0;
        public string MessageText { get; set; } = string.Empty;
        public bool IsAssigned { get; set; } = false;
        public string? AssignedUserId { get; set; }
    }

}
