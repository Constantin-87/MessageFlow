@rendermode RenderMode.InteractiveWebAssembly
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
<link href="css/ChatWindow.css" rel="stylesheet" />

<div class="chat-window-container">
    <!-- Tabs Navigation -->
    <div class="chat-tabs">
        @foreach (var tab in ActiveChats)
        {
            <div class="chat-tab @(tab.IsActive ? "active-tab" : "")" @onclick="() => SwitchTab(tab)">
                <span class="tab-sender">[@tab.SourceLabel] @tab.SenderUsername</span>
                <button class="close-btn" @onclick:stopPropagation @onclick="() => ConfirmCloseTab(tab)">X</button>
            </div>
        }
    </div>

    <!-- Chat Window -->
    @if (ActiveChats.Any(c => c.IsActive))
    {
        var activeChat = ActiveChats.First(c => c.IsActive);
        <div class="chat-window">
            <h5>Conversation with: @activeChat.SenderUsername</h5>
            <div class="chat-history" @ref="ChatHistoryDiv">
                @foreach (var message in activeChat.Messages)
                {
                    <div class="message-item @(message.UserId == activeChat.SenderId ? "customer-message" : "app-message")">
                        <span>@message.Content</span>
                        @if (message.UserId != activeChat.SenderId)
                        {
                            <span class="delivery-time"> @message.SentAt.ToString("HH:mm") </span>
                            <img src="@message.StatusIcon" title="@message.Tooltip" alt="Status Icon" class="status-icon" />
                        }
                        else
                        {
                            <span class="delivery-time">@message.SentAt.ToString("HH:mm")</span>
                        }
                    </div>
                }
            </div>

            <div class="chat-input-area">
                <input @bind="MessageText" @bind:event="oninput" placeholder="Type a message..." @onkeydown="HandleEnterKey" />
                <button @onclick="() => SendMessage(activeChat)">Send</button>
            </div>
        </div>
    }
</div>

@code {

    [Parameter] public string UserId { get; set; }
    [Parameter] public string CurrentUserName { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }

    private ElementReference ChatHistoryDiv;
    private List<Conversation> ActiveChats = new();
    private string MessageText = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ChatHistoryDiv.Context != null)
        {
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", ChatHistoryDiv);
    }

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            // Confirm connection state
            Console.WriteLine($"HubConnection State: {HubConnection.State}");

            HubConnection.On<Conversation>("AssignConversation", (conversation) =>
            {
                AddNewChat(conversation);
                _ = ScrollToBottom();
            });

            HubConnection.On<Conversation, Message>("SendMessageToAssignedUser", (conversation, message) =>
            {
                Console.WriteLine($"Received message from {conversation.SenderId}: {message.Content}");
                AddMessageToChat(conversation, message);
                _ = ScrollToBottom();
            });

            HubConnection.On<List<Conversation>>("LoadAssignedConversations", (assignedConversations) =>
            {
                Console.WriteLine("Assigned conversations loaded.");
                LoadAssignedConversations(assignedConversations);
            });

            HubConnection.On<string, string, string?>("MessageStatusUpdated", (messageId, status, errorMessage) =>
            {
                UpdateMessageStatus(messageId, status, errorMessage);
            });

        }
    }

    private void UpdateMessageStatus(string messageId, string status, string? errorMessage = null)
    {
        foreach (var chat in ActiveChats)
        {
            var message = chat.Messages.FirstOrDefault(m => m.Id == messageId);
            if (message != null)
            {
                message.Status = status;
                if (status == "error")
                {
                    message.ErrorMessage = errorMessage;
                }
                StateHasChanged();
                Console.WriteLine($"Message {messageId} status updated to '{status}'.");
                return;
            }
        }

        Console.WriteLine($"Message with ID {messageId} not found in any active chat.");
    }



    public void LoadAssignedConversations(List<Conversation> assignedConversations)
    {
        ActiveChats.Clear();
        foreach (var conversation in assignedConversations)
        {
            // Messages are sorted by SentAt for each conversation
            conversation.Messages = conversation.Messages.OrderBy(m => m.SentAt).ToList();
            ActiveChats.Add(conversation);
        }

        // Set the first tab as active, if available
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First());
        }
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(MessageText))
        {
            var activeChat = ActiveChats.FirstOrDefault(c => c.IsActive);
            if (activeChat != null)
            {
                await SendMessage(activeChat);
            }
        }
    }


    private async Task ConfirmCloseTab(Conversation tab)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmClose", $"Are you sure you want to close the chat with {tab.SenderUsername}?");
        if (confirmed)
        {
            await CloseTabAsync(tab);
        }
    }

    private async Task CloseTabAsync(Conversation tab)
    {
        ActiveChats.Remove(tab);
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First());
        }

        StateHasChanged();

        // Send a request to the server to close and anonymize the chat
        await HubConnection.SendAsync("CloseAndAnonymizeChat", tab.SenderId);
    }

    private void AddMessageToChat(Conversation incomingConversation, Message message)
    {
        if (incomingConversation == null || message == null)
        {
            Console.WriteLine($"Invalid conversation or message. Message ID: {message?.Id}");
            return;
        }

        // Find the existing conversation in ActiveChats by ID
        var existingConversation = ActiveChats.FirstOrDefault(c => c.Id == incomingConversation.Id);

        if (existingConversation != null)
        {
            // Add the message to the conversation's Messages collection
            existingConversation.Messages.Add(message);
            Console.WriteLine($"Message added to conversation {existingConversation.Id}: {message.Content}");
        }
        else
        {
            Console.WriteLine($"Conversation not found for ID: {incomingConversation.Id}. Adding it as a new chat.");

            // If the conversation does not exist in ActiveChats, add it
            incomingConversation.Messages.Add(message);
            ActiveChats.Add(incomingConversation);
        }

        StateHasChanged();
    }

    public void AddNewChat(Conversation conversation)
    {
        if (!ActiveChats.Any(c => c.Id == conversation.Id))
        {
            ActiveChats.Add(conversation);
        }

        SwitchTab(conversation);
    }

    private void SwitchTab(Conversation tab)
    {
        foreach (var chat in ActiveChats)
        {
            chat.IsActive = false;
        }
        tab.IsActive = true;
        StateHasChanged();
    }

    private void CloseTab(Conversation tab)
    {
        ActiveChats.Remove(tab);
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First()); // Switch to the first tab
        }
        StateHasChanged();
    }

    private async Task SendMessage(Conversation chat)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userName = user?.Identity?.Name;

        Console.WriteLine($"UserId: {userId}");
        if (!string.IsNullOrWhiteSpace(MessageText))
        {
            // Generate a unique local message ID
            var localMessageId = Guid.NewGuid().ToString();

            var newMessage = new Message
                {
                    Id = localMessageId,
                    ConversationId = chat.Id,
                    UserId = UserId,
                    Username = CurrentUserName,
                    Content = MessageText,
                    SentAt = DateTime.UtcNow,
                    Status = "SentToProvider",
                    ChangedAt = DateTime.UtcNow
                };

            chat.Messages.Add(newMessage);
            StateHasChanged();

            await HubConnection.SendAsync("SendMessageToCustomer", newMessage);
            MessageText = string.Empty;

            Console.WriteLine($"Sending message to customer {chat.SenderId}: {newMessage.Content}");
            await ScrollToBottom();
        }
        else
        {
            Console.WriteLine("Message text is empty.");
        }
    }
}
<script>
    function confirmClose(message) {
        return confirm(message);
    }

    function scrollToBottom(element) {
        if (element && element.scrollHeight) {
            setTimeout(() => {
                element.scrollTop = element.scrollHeight;
            }, 50);
        }
    }

</script>
