@rendermode RenderMode.InteractiveWebAssembly
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="chat-window-container">
    <!-- Tabs Navigation -->
    <div class="chat-tabs">
        @foreach (var tab in ActiveChats)
        {
            <div class="chat-tab @(tab.IsActive ? "active" : "")">
                <span @onclick="() => SwitchTab(tab)">@tab.SenderId</span>
                <button class="close-btn" @onclick="() => ConfirmCloseTab(tab)">X</button>
            </div>
        }
    </div>

    <!-- Chat Window -->
    @if (ActiveChats.Any(c => c.IsActive))
    {
        var activeChat = ActiveChats.First(c => c.IsActive);
        <div class="chat-window">
            <h5>Conversation with: @activeChat.SenderId</h5>
            <div class="chat-history">
                @foreach (var message in activeChat.Messages)
                {
                    <div>@message.Username: @message.Content</div>
                }
            </div>
            <input @bind="MessageText" placeholder="Type a message..." />
            <button @onclick="() => SendMessage(activeChat)">Send</button>
        </div>
    }
</div>

@code {

    [Parameter] public string UserId { get; set; }
    [Parameter] public string CurrentUserName { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    private List<Conversation> ActiveChats = new();
    private string MessageText = string.Empty;

    public void RegisterHandlers()
    {
        if (HubConnection != null)
        {
            // Confirm connection state
            Console.WriteLine($"HubConnection State: {HubConnection.State}");

            HubConnection.On<Conversation>("AssignConversation", (conversation) =>
            {
                AddNewChat(conversation);
            });

            HubConnection.On<Conversation, Message>("SendMessageToAssignedUser", (conversation, message) =>
            {
                Console.WriteLine($"Received message from {conversation.SenderId}: {message.Content}");
                AddMessageToChat(conversation, message);
            });

            HubConnection.On<string, string, string>("MessageDelivered", (recipientId, messageContent, messageId) =>
            {
                Console.WriteLine($"Message delivered to {recipientId}: {messageContent}");
                MarkMessageAsDelivered(recipientId, messageId);
            });

            HubConnection.On<List<Conversation>>("LoadAssignedConversations", (assignedConversations) =>
           {
               Console.WriteLine("Assigned conversations loaded.");
               LoadAssignedConversations(assignedConversations);
           });

        }
    }

    public void LoadAssignedConversations(List<Conversation> assignedConversations)
    {
        ActiveChats.Clear();
        foreach (var conversation in assignedConversations)
        {
            // Ensure messages are sorted by SentAt for each conversation
            conversation.Messages = conversation.Messages.OrderBy(m => m.SentAt).ToList();
            ActiveChats.Add(conversation);
        }

        // Set the first tab as active, if available
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First());
        }
    }


    private async Task ConfirmCloseTab(Conversation tab)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmClose", $"Are you sure you want to close the chat with {tab.SenderId}?");
        if (confirmed)
        {
            await CloseTabAsync(tab);
        }
    }

    private async Task CloseTabAsync(Conversation tab)
    {
        ActiveChats.Remove(tab);
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First());
        }

        StateHasChanged();

        // Send a request to the server to close and anonymize the chat
        await HubConnection.SendAsync("CloseAndAnonymizeChat", tab.SenderId);
    }

    private void MarkMessageAsDelivered(string recipientId, string messageId)
    {
        var chat = ActiveChats.FirstOrDefault(c => c.SenderId == recipientId);
        if (chat != null)
        {
            // Find the specific message in the chat using its ID
            var message = chat.Messages.FirstOrDefault(m => m.Id == messageId);

            if (message != null)
            {
                // Append "(Delivered)" to the message content if it doesn't already have it
                if (!message.Content.EndsWith("(Delivered)"))
                {
                    message.Content += " (Delivered)";
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine($"Message with ID {messageId} not found in chat with {recipientId}");
            }
        }
        else
        {
            Console.WriteLine($"No active chat found for recipient: {recipientId}");
        }
    }



    private void AddMessageToChat(Conversation conversation, Message message)
    {
        if (conversation != null && message != null)
        {
            // Add the message to the conversation's Messages collection
            conversation.Messages.Add(message);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Conversation not found for message with ID: {message.Id}");
        }
    }

    public void AddNewChat(Conversation conversation)
    {
        if (!ActiveChats.Any(c => c.Id == conversation.Id))
        {
            ActiveChats.Add(conversation);
        }

        SwitchTab(conversation);
    }

    private void SwitchTab(Conversation tab)
    {
        foreach (var chat in ActiveChats)
        {
            chat.IsActive = false;
        }
        tab.IsActive = true;
        StateHasChanged();
    }

    private void CloseTab(Conversation tab)
    {
        ActiveChats.Remove(tab);
        if (ActiveChats.Any())
        {
            SwitchTab(ActiveChats.First()); // Switch to the first tab
        }
        StateHasChanged();
    }

    private async Task SendMessage(Conversation chat)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var userName = user?.Identity?.Name;

        Console.WriteLine($"UserId: {userId}");
        if (!string.IsNullOrWhiteSpace(MessageText))
        {
            // Generate a unique local message ID
            var localMessageId = Guid.NewGuid().ToString();

            var newMessage = new Message
                {
                    Id = localMessageId,
                    ConversationId = chat.Id,
                    UserId = UserId,
                    Username = CurrentUserName,
                    Content = MessageText,
                    SentAt = DateTime.UtcNow
                };

            chat.Messages.Add(newMessage);
            StateHasChanged();

            await HubConnection.SendAsync("SendMessageToCustomer", newMessage);
            MessageText = string.Empty;

            Console.WriteLine($"Sending message to customer {chat.SenderId}: {MessageText}");
        }
        else
        {
            Console.WriteLine("Message text is empty.");
        }
    }
}
<script>
    function confirmClose(message) {
        return confirm(message);
    }
</script>
