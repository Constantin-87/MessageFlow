@attribute [Authorize(Roles = "SuperAdmin, Admin")]
@rendermode RenderMode.InteractiveServer
@inject CompanyManagementService CompanyManagementService
@inject IJSRuntime JS

<!-- Company Details Section -->
<div class="card">
    <div class="card-header" @onclick="() => ToggleSection(nameof(CompanyDetailsExpanded))">
        <h5>Company Details</h5>
    </div>
    <div class="card-body" style="@GetSectionStyle(CompanyDetailsExpanded)">
        <EditForm Model="Company" OnValidSubmit="UpdateCompanyDetails">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Company.AccountNumber" class="form-control" placeholder="Company Account Number" />
                <label for="accountNumber">Company Account Number</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Company.CompanyName" class="form-control" placeholder="Company Name" />
                <label for="companyName">Company Name</label>
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="Company.Description" class="form-control" placeholder="Company Description" />
                <label for="companyDescription">Company Description</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Company.IndustryType" class="form-control" placeholder="Industry Type" />
                <label for="industryType">Industry Type</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Company.WebsiteUrl" class="form-control" placeholder="Website URL" />
                <label for="websiteUrl">Website URL</label>
            </div>

            @if (IsEditMode)
            {
                <button type="submit" class="btn btn-primary">Update Company Details</button>
            }

        </EditForm>
    </div>
</div>

<!-- Company Emails Section -->
<div class="card mt-3">
    <div class="card-header" @onclick="() => ToggleSection(nameof(EmailsExpanded))">
        <h5>Company Emails</h5>
    </div>
    <div class="card-body" style="@GetSectionStyle(EmailsExpanded)">

        <!-- Controls at the top -->
        <div class="d-flex gap-2 mb-3">
            <button type="button" class="btn btn-secondary" @onclick="AddEmail">Add New Email</button>
            <button type="submit" class="btn btn-primary" @onclick="SaveCompanyEmails">Save All</button>
        </div>

        <!-- Input fields for existing & new emails -->
        <ul class="list-group">
            @foreach (var email in Company.CompanyEmails)
            {
                <li class="list-group-item d-flex align-items-center gap-2">
                    <InputText @bind-Value="email.EmailAddress" class="form-control" placeholder="Email Address" />
                    <InputText @bind-Value="email.Description" class="form-control" placeholder="Description (e.g., Support, Sales)" />
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveEmail(email)">Remove</button>
                </li>
            }
        </ul>
    </div>
</div>

<!-- Company Phone Numbers Section -->
<div class="card mt-3">
    <div class="card-header" @onclick="() => ToggleSection(nameof(PhoneNumbersExpanded))">
        <h5>Company Phone Numbers</h5>
    </div>
    <div class="card-body" style="@GetSectionStyle(PhoneNumbersExpanded)">

        <!-- Controls at the top -->
        <div class="d-flex gap-2 mb-3">
            <button type="button" class="btn btn-secondary" @onclick="AddPhoneNumber">Add New Phone Number</button>
            <button type="submit" class="btn btn-primary" @onclick="SaveCompanyPhoneNumbers">Save All</button>
        </div>

        <!-- Input fields for existing & new phone numbers -->
        <ul class="list-group">
            @foreach (var phone in Company.CompanyPhoneNumbers)
            {
                <li class="list-group-item d-flex align-items-center gap-2">
                    <InputText @bind-Value="phone.PhoneNumber" class="form-control" placeholder="Phone Number" />
                    <InputText @bind-Value="phone.Description" class="form-control" placeholder="Description (e.g., Support, Sales)" />
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemovePhoneNumber(phone)">Remove</button>
                </li>
            }
        </ul>
    </div>
</div>

<!-- Pretraining Files Section -->
<div class="card mt-3">
    <div class="card-header" @onclick="() => ToggleSection(nameof(FilesExpanded))">
        <h5>Pretraining Files</h5>
    </div>
    <div class="card-body" style="@GetSectionStyle(FilesExpanded)">


        <!-- Display Existing Files -->
        <h6>Existing files in storage:</h6>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in ExistingFiles)
                {
                    <tr>
                        <td>@file.FileType</td>
                        <td>@file.FileDescription</td>
                        <td>@file.FileUrl</td>
                        <td>@file.ProcessedAt</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteExistingFile(file)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Display Selected Files -->
        <h6>Upload new files:</h6>
        <InputFile multiple OnChange="HandleFileSelection" class="form-control mb-3" />



        @if (UploadedFiles.Count > 0)
        {
            <table class="table table-bordered" style="margin-top: 15px;">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in UploadedFiles)
                    {
                        <tr>
                            <td>@file.FileName</td>
                            <td>
                                <InputText @bind-Value="file.FileDescription" class="form-control" placeholder="Enter Description" />
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemovePendingFile(file)">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-success mt-3" @onclick="UploadAllFiles">Save All Files</button>
        }
    </div>
</div>

<!-- Metadata Section -->
<div class="card mt-3">
    <div class="card-header" @onclick="() => ToggleSection(nameof(MetadataExpanded))">
        <h5>Metadata Management</h5>
    </div>
    <div class="card-body" style="@GetSectionStyle(MetadataExpanded)">
        <button class="btn btn-info" @onclick="UpdateMetadata">Update Company Metadata</button>
        <button class="btn btn-danger" @onclick="DeleteMetadata">Delete Company Metadata</button>
        <button class="btn btn-secondary" @onclick="ToggleMetadataView">Show Metadata</button>
        <button class="btn btn-warning" @onclick="CreateCompanyIndex">Create Search Index</button>

        @if (ShowMetadata)
        {
            <textarea class="form-control mt-2" rows="10" readonly>@CurrentMetadata</textarea>
        }
    </div>
</div>

@if (!IsEditMode)
{
    <button type="button" class="btn btn-success mt-4" @onclick="CreateCompany">Create Company</button>
}

@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public Company Company { get; set; } = new Company();

    [Parameter]
    public EventCallback<string> OnActionCompleted { get; set; }

    private string Title => IsEditMode ? $"Edit {Company.CompanyName} Details" : "Create New Company";
    private string GetSectionStyle(bool isExpanded) => isExpanded ? "display: block;" : "display: none;";
    private bool CompanyDetailsExpanded { get; set; } = true;
    private bool EmailsExpanded { get; set; } = false;
    private bool PhoneNumbersExpanded { get; set; } = false;
    private bool FilesExpanded { get; set; } = false;
    private bool MetadataExpanded { get; set; } = false;

    private bool ShowMetadata { get; set; } = false;
    private string CurrentMetadata { get; set; } = string.Empty;

    private List<PretrainDataFile> UploadedFiles { get; set; } = new();
    private List<ProcessedPretrainData> ExistingFiles { get; set; } = new();
    private InputFile fileInput;

    protected override void OnInitialized()
    {
        Company.CompanyEmails ??= new List<CompanyEmail>();
        Company.CompanyPhoneNumbers ??= new List<CompanyPhoneNumber>();
        Company.PretrainDataFiles ??= new List<PretrainDataFile>();

        if (Company.CompanyEmails.Count == 0)
        {
            Company.CompanyEmails.Add(new CompanyEmail());
        }
        if (Company.CompanyPhoneNumbers.Count == 0)
        {
            Company.CompanyPhoneNumbers.Add(new CompanyPhoneNumber());
        }
    }  

    private async Task ToggleSection(string section)
    {
        switch (section)
        {
            case nameof(CompanyDetailsExpanded):
                CompanyDetailsExpanded = !CompanyDetailsExpanded;
                break;
            case nameof(EmailsExpanded):
                EmailsExpanded = !EmailsExpanded;
                break;
            case nameof(PhoneNumbersExpanded):
                PhoneNumbersExpanded = !PhoneNumbersExpanded;
                break;
            case nameof(FilesExpanded):
                FilesExpanded = !FilesExpanded;
                await LoadExistingFiles();
                break;
            case nameof(MetadataExpanded):
                MetadataExpanded = !MetadataExpanded;
                break;
        }
    }

    #region Create Company Logic
    private async Task CreateCompany()
    {
        var result = await CompanyManagementService.CreateCompanyAsync(Company);
        await OnActionCompleted.InvokeAsync(result.success ? "Company created successfully." : "Error creating company.");
    }
    #endregion

    #region Company Details Logic
    private async Task UpdateCompanyDetails()
    {
        var result = await CompanyManagementService.UpdateCompanyDetailsAsync(Company);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
    }
    #endregion

    #region Company Emails Logic
    private void AddEmail()
    {
        Company.CompanyEmails.Add(new CompanyEmail());
    }
    private void RemoveEmail(CompanyEmail email)
    {
        Company.CompanyEmails.Remove(email);

        if (Company.CompanyEmails.Count == 0)
        {
            Company.CompanyEmails.Add(new CompanyEmail());
        }
    }
    private async Task SaveCompanyEmails()
    {
        var result = await CompanyManagementService.UpdateCompanyEmailsAsync(Company);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
    }
    #endregion

    #region Company Phone Numbers Logic
    private void AddPhoneNumber()
    {
        Company.CompanyPhoneNumbers.Add(new CompanyPhoneNumber());
    }
    private void RemovePhoneNumber(CompanyPhoneNumber phone)
    {
        Company.CompanyPhoneNumbers.Remove(phone);

        if (Company.CompanyPhoneNumbers.Count == 0)
        {
            Company.CompanyPhoneNumbers.Add(new CompanyPhoneNumber());
        }
    }
    private async Task SaveCompanyPhoneNumbers()
    {
        var result = await CompanyManagementService.UpdateCompanyPhoneNumbersAsync(Company);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
    }
    #endregion

    #region Company MetaData Logic
    private async Task ToggleMetadataView()
    {
        ShowMetadata = !ShowMetadata;
        if (ShowMetadata)
        {
            await LoadMetadata();
            StateHasChanged();
        }
    }

    private async Task LoadMetadata()
    {
        var result = await CompanyManagementService.GetCompanyMetadataAsync(Company.Id);
        if (result.success)
        {
            CurrentMetadata = result.metadata;
        }
        else
        {
            await OnActionCompleted.InvokeAsync(result.errorMessage);
        }
    }

    private async Task UpdateMetadata()
    {
        var result = await CompanyManagementService.GenerateAndUploadCompanyMetadataAsync(Company.Id);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
    }

    private async Task DeleteMetadata()
    {
        var result = await CompanyManagementService.DeleteCompanyMetadataAsync(Company.Id);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
        if (result.success)
        {
            CurrentMetadata = string.Empty; // Clear metadata display after deletion
        }
    }

    private async Task CreateCompanyIndex()
    {
        var result = await CompanyManagementService.CreateAzureAiSearchIndexAndUploadFilesAsync(Company.Id);
        await OnActionCompleted.InvokeAsync(result.success ? "Search index created successfully!" : $"Error: {result.errorMessage}");
    }

    #endregion

    #region Company FileHandling Logic
    private async Task LoadExistingFiles()
    {
        var result = await CompanyManagementService.GetCompanyPretrainingFilesAsync(Company.Id);
        if (result.success)
        {
            ExistingFiles = result.files;
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream();
            var fileData = new MemoryStream();
            await stream.CopyToAsync(fileData);
            fileData.Position = 0;

            if (!UploadedFiles.Any(f => f.FileName == file.Name))
            {
                UploadedFiles.Add(new PretrainDataFile
                    {
                        CompanyId = Company.Id,
                        FileName = file.Name,
                        FileDescription = "",
                        FileContent = fileData
                    });
            }
        }
    }

    private async Task UploadAllFiles()
    {
        var result = await CompanyManagementService.UploadCompanyFilesAsync(UploadedFiles);
        await OnActionCompleted.InvokeAsync(result.errorMessage);
        if (result.success)
        {
            UploadedFiles.Clear();
            await LoadExistingFiles(); // Refresh file list
        }
    }

    private async Task DeleteExistingFile(ProcessedPretrainData file)
    {
        var result = await CompanyManagementService.DeleteCompanyFileAsync(Company.Id, file.FileUrl);
        await OnActionCompleted.InvokeAsync(result ? "File deleted successfully." : "Error deleting file.");
        if (result)
        {
            ExistingFiles.Remove(file);
        }
    }

    private void RemovePendingFile(PretrainDataFile file)
    {
        UploadedFiles.Remove(file);
    }


    #endregion

}
