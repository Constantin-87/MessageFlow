@page "/edit-company/{companyId:int}"
@attribute [Authorize(Roles = "SuperAdmin, Admin")]
@rendermode RenderMode.InteractiveServer

@inject CompanyManagementService CompanyManagementService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@using System.Security.Claims

<PageTitle>Edit Company</PageTitle>

@if (!string.IsNullOrEmpty(NotificationMessage))
{
    <div class="alert alert-info">@NotificationMessage</div>
}

<CompanyAddEditForm IsEditMode="true" Company="company" OnActionCompleted="HandleActionCompleted" />

@code {
    private Company company = new Company();
    private string NotificationMessage = string.Empty;

    [Parameter]
    public int companyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = CompanyManagementService.CreateDbContext();

        var userId = HttpContextAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var userCompanyId = await dbContext.Users
            .Where(u => u.Id == userId)
            .Select(u => u.CompanyId)
            .FirstOrDefaultAsync();

        var userRoles = HttpContextAccessor.HttpContext?.User.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToList();

        bool isSuperAdmin = userRoles.Contains("SuperAdmin");

        if (!isSuperAdmin && userCompanyId != companyId)
        {
            Console.WriteLine($"⛔ Unauthorized access attempt by user {userId} to company {companyId}");
            NavigationManager.NavigateTo("/Accounts/AccessDenied", forceLoad: true);
            return;
        }

        company = await CompanyManagementService.GetCompanyByIdAsync(dbContext, companyId) ?? new Company();
    }

    private void HandleActionCompleted(string message)
    {
        NotificationMessage = message;
        StateHasChanged();
    }

}
