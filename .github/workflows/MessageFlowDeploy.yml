name: Deploy to IIS

on:
  push:
    branches:
      - master
      - preprod

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Project
      run: dotnet build --configuration Release

    - name: Set Azure Key Vault URL
      run: Add-Content -Path $env:GITHUB_ENV -Value "AzureKeyVaultURL=${{ vars.AZURE_KEY_VAULT_URL }}"
      shell: pwsh

    - name: Display Deploy Environment
      run: echo "Deploying to ${{ env.DEPLOY_ENV }}"
      shell: bash

    - name: Publish Server Project
      run: dotnet publish MessageFlow.Server/MessageFlow.Server.csproj -c Release -o ${{ github.workspace }}/publish/Server

    - name: Publish Identity Project
      run: dotnet publish MessageFlow.Identity/MessageFlow.Identity.csproj -c Release -o ${{ github.workspace }}/publish/Identity

    - name: Publish Client Project
      run: dotnet publish MessageFlow.Client/MessageFlow.Client.csproj -c Release -o ${{ github.workspace }}/publish/Client

    - name: Combine Publish Outputs
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path ${{ github.workspace }}/publish/Combined -Force
        Copy-Item ${{ github.workspace }}/publish/Server/* -Destination ${{ github.workspace }}/publish/Combined -Recurse -Force
        Copy-Item ${{ github.workspace }}/publish/Identity/* -Destination ${{ github.workspace }}/publish/Combined -Recurse -Force
        New-Item -ItemType Directory -Path ${{ github.workspace }}/publish/Combined/wwwroot -Force
        Copy-Item ${{ github.workspace }}/publish/Client/wwwroot/* -Destination ${{ github.workspace }}/publish/Combined/wwwroot -Recurse -Force

    - name: Set Deployment Environment
      id: set-env
      shell: pwsh
      run: |
        if ("${{ github.ref }}" -eq "refs/heads/master") {
          echo "DEPLOY_ENV=Production" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_SERVER=${{ secrets.WEB_DEPLOY_SERVER_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_USER=${{ secrets.WEB_DEPLOY_USER_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_PASSWORD=${{ secrets.WEB_DEPLOY_PASSWORD_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_SITE=${{ vars.WEB_DEPLOY_SITE_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_PATH=${{ vars.WEB_DEPLOY_PATH_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APPSETTINGS_FILE=appsettings.production.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_PROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        elseif ("${{ github.ref }}" -eq "refs/heads/preprod") {
          echo "DEPLOY_ENV=Preprod" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_SERVER=${{ secrets.WEB_DEPLOY_SERVER_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_USER=${{ secrets.WEB_DEPLOY_USER_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_PASSWORD=${{ secrets.WEB_DEPLOY_PASSWORD_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_SITE=${{ vars.WEB_DEPLOY_SITE_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "WEB_DEPLOY_PATH=${{ vars.WEB_DEPLOY_PATH_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APPSETTINGS_FILE=appsettings.preprod.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_PREPROD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        }

    - name: Create Environment-Specific AppSettings
      shell: pwsh
      run: |
        $appSettingsPath = "${{ github.workspace }}/publish/Combined/${{ env.APPSETTINGS_FILE }}"
        echo '{
          "ConnectionStrings": {
            "DBConnectionString": "' + "${{ env.DB_CONNECTION_STRING }}" + '"
          },
          "AzureKeyVault": {
            "Url": "' + "${{ env.AzureKeyVaultURL }}" + '"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "ServerBaseAddress": "https://${{ env.WEB_DEPLOY_SERVER }}",
          "WebHostUrls": [ "http://*:80", "https://*:443" ]
        }' | Out-File -FilePath $appSettingsPath -Encoding utf8 -Force

    - name: Apply Entity Framework Migrations
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-ef --version 8.0.10
        dotnet ef database update `
          --project "${{ github.workspace }}/MessageFlow.DataAccess/MessageFlow.DataAccess.csproj" `
          --startup-project "${{ github.workspace }}/MessageFlow.Server/MessageFlow.Server.csproj" `
          --connection "${{ env.DB_CONNECTION_STRING }}"

    - name: Stop IIS before Deployment
      shell: pwsh
      run: |
        Write-Host "Stopping IIS to release locked files..."
        iisreset /stop

    - name: Update Web.config with Deployment Environment
      shell: pwsh
      run: |
        $webConfigPath = "${{ github.workspace }}/publish/Combined/Web.config"
        if (Test-Path $webConfigPath) {
          (Get-Content $webConfigPath) -replace '<environmentVariable name="ASPNETCORE_ENVIRONMENT" value=".*?" />', '<environmentVariable name="ASPNETCORE_ENVIRONMENT" value="${{ env.DEPLOY_ENV }}" />' | Set-Content $webConfigPath
        }


    - name: Deploy to IIS via Web Deploy
      env:
        ASPNETCORE_ENVIRONMENT: ${{ env.DEPLOY_ENV }}
        WEB_DEPLOY_SERVER: ${{ env.WEB_DEPLOY_SERVER }}
        WEB_DEPLOY_USER: ${{ env.WEB_DEPLOY_USER }}
        WEB_DEPLOY_PASSWORD: ${{ env.WEB_DEPLOY_PASSWORD }}
        WEB_DEPLOY_SITE: ${{ env.WEB_DEPLOY_SITE }}
        WEB_DEPLOY_PATH: ${{ env.WEB_DEPLOY_PATH }}

      shell: cmd
      run: |
        "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe" ^
        -verb:sync ^
        -source:contentPath="${{ github.workspace }}/publish/Combined" ^
        -dest:contentPath="${{ env.WEB_DEPLOY_PATH }}",computerName="https://${{ env.WEB_DEPLOY_SERVER }}:8172/msdeploy.axd?site=${{ env.WEB_DEPLOY_SITE }}",userName="${{ env.WEB_DEPLOY_USER }}",password="${{ env.WEB_DEPLOY_PASSWORD }}",authType="Basic" ^
        -allowUntrusted ^
        -retryAttempts:2 ^
        -retryInterval:5000


    - name: Start IIS after Deployment
      shell: pwsh
      run: |
        Write-Host "Starting IIS after deployment..."
        iisreset /start
        