@page "/Accounts/Login"

@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject CompanyManagementService CompanyManagementService
@inject TeamsManagementService TeamsManagementService


@using System.Security.Claims;

<PageTitle>Log in</PageTitle>


<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use your account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                    <label for="username" class="form-label">Username</label>
                    <ValidationMessage For="() => Input.UserName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="/Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie for a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // Check if the form data is valid
        if (string.IsNullOrEmpty(Input.UserName) || string.IsNullOrEmpty(Input.Password))
        {
            errorMessage = "Username and password cannot be empty.";
            return;
        }
        // Attempt to sign in the user
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            var user = await SignInManager.UserManager.FindByNameAsync(Input.UserName);
            if (user != null)
            {
                // Retrieve the roles for the user
                var roles = await SignInManager.UserManager.GetRolesAsync(user);

                var companyDto = await CompanyManagementService.GetCompanyByIdAsync(user.CompanyId);
                string companyName = companyDto?.CompanyName ?? "Unknown"; var userTeams = await TeamsManagementService.GetUserTeamsAsync(user.Id);
                var userTeamsString = string.Join(";", userTeams.Select(t => $"{t.Id}:{t.TeamName}"));


                // Create claims for roles and other user data
                var claims = new List<Claim>
                {
                    new Claim("CompanyId", user.CompanyId.ToString()),
                    new Claim(ClaimTypes.Name, user.UserName),
                    new Claim(ClaimTypes.NameIdentifier, user.Id),
                    new Claim("CompanyName", companyName),
                    new Claim("UserTeams", userTeamsString)
                };

                // Update the LastActivity timestamp immediately after login
                user.LastActivity = DateTime.UtcNow;
                await SignInManager.UserManager.UpdateAsync(user);

                // Add each role as a claim
                foreach (var role in roles)
                {
                    claims.Add(new Claim(ClaimTypes.Role, role));
                }

                // Sign in with the additional claims
                await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, claims);

                // Redirect based on user role
                if (!string.IsNullOrEmpty(ReturnUrl) && Uri.IsWellFormedUriString(ReturnUrl, UriKind.Relative))
                {
                    RedirectManager.RedirectTo(ReturnUrl);
                }
                else if (roles.Contains("Agent"))
                {
                    RedirectManager.RedirectTo("/AgentWorkspace");
                }
                else if (roles.Contains("SuperAdmin") || roles.Contains("Admin") || roles.Contains("Manager"))
                {
                    RedirectManager.RedirectTo("/AgentManagerWorkspace");
                }
                else
                {
                    // Fallback redirection if no role matches
                    RedirectManager.RedirectTo("/");
                }

                Logger.LogInformation("User '{UserName}' logged in with roles: {Roles}", user.UserName, string.Join(", ", roles));
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Accounts/Lockout");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
